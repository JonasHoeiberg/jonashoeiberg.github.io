{"version":3,"sources":["util.js","components/labyrinthParameters.js","components/labyrinth.js","components/labyrinthControls.js","App.js","serviceWorker.js","index.js"],"names":["camelToKebab","object","recursive","newObject","Object","keys","reduce","accObject","currentPropertyName","newPropertyName","match","newString","word","index","toLowerCase","Array","isArray","assign","kebabToCamel","toUpperCase","slice","Symbol","iterator","Queue","initialCollection","classCallCheck","this","values","top","createClass","key","value","val","TOP_MAX","splice","push","_Symbol$iterator","get","length","GraphNode","edges","properties","parentNode","parentEdge","Graph","nodes","maze","width","size","mazeData","data","pony","domokun","endPoint","graph","map","cell","forEach","node","west","label","east","south","north","walls","wall","edgeIdx","findIndex","otherNode","otherEdgeIdx","edge","LabyrinthParameters","_Component","_getPrototypeOf2","_this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","mazePlayerName","mazeWidth","mazeHeight","difficulty","maze_id","undefined","inherits","_getMazeId","asyncToGenerator","regenerator_default","a","mark","_callee","requestBody","createRequest","response","responseData","wrap","_context","prev","next","parseInt","Request","method","headers","Content-Type","Accept","body","JSON","stringify","fetch","sent","status","Error","json","setState","stop","_this2","ponySelectors","react_default","createElement","className","type","onChange","e","target","ponyName","min","max","onClick","_callee2","_context2","getMazeId","props","generateMaze","Component","Labyrinth","cellWidth","height","cellElements","y","x","indexOf","renderEndPointCell","renderPonyCell","renderDomokunCell","showSolution","renderSolutionCell","renderBasicCell","additionalClasses","nodeWidth","nodeHeight","nodeLeft","nodeTop","classNames","item","classes","acc","style","toString","left","getContainerStyle","renderMazeCells","LabyrinthControls","nodeDirections","currentNode","solutionFound","handleControl","disabled","some","dir","App","labyrinthState","resultImage","solution","mazeRequest","mazeResponse","gameState","hiddenUrl","generateGraph","generateSolution","signal","makeMove","fetchMaze","step","direction","moveRequest","filter","startNode","endNode","validNode","nodeQ","enqueue","empty","dequeue","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","shortestPath","find","prop","every","reverse","fromMaze","src","labyrinthParameters_LabyrinthParameters","labyrinth_Labyrinth","labyrinthControls_LabyrinthControls","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6567579.chunk.js","sourcesContent":["//React doesn't like kebaab case, and the API uses it, so I made this. Doesn't catch numbers and stuff in variable names, but doesn;t need to for now\r\n//No camels were hurt in the making of this function\r\nexport function camelToKebab(object, recursive) {\r\n    if (recursive == null) {\r\n        recursive = false;\r\n    }\r\n\r\n    let newObject = Object.keys(object).reduce((accObject, currentPropertyName) => {\r\n        let words = currentPropertyName.match(/(^[^A-Z]+)|([A-Z][^A-Z]+)/g);\r\n\r\n        let newPropertyName = words.reduce((newString, word, index) => {\r\n            if (index !== 0) {\r\n                newString += \"-\";\r\n            }\r\n\r\n            newString += word;\r\n\r\n            return newString.toLowerCase();\r\n        }, \"\");\r\n\r\n        accObject[newPropertyName] = object[currentPropertyName];\r\n\r\n        if (\r\n            typeof accObject[newPropertyName] === \"object\"\r\n            && !Array.isArray(accObject[newPropertyName])\r\n            && recursive)\r\n        {\r\n            accObject[newPropertyName] = camelToKebab(accObject[newPropertyName]);\r\n        }\r\n\r\n        return accObject;\r\n    }, {});\r\n\r\n    //Return a copy\r\n    return Object.assign({}, newObject);\r\n}\r\n\r\n//Do NOT try this at home. Despite appearances, it's much harder to convert a kebab into a camel than the other way around\r\nexport function kebabToCamel(object, recursive) {\r\n    let newObject = Object.keys(object).reduce((accObject, currentPropertyName) => {\r\n        let words = currentPropertyName.match(/(^[^-]+)|(-[^-]+)/g);\r\n\r\n        let newPropertyName = words.reduce((newString, word, index) => {\r\n            if (index !== 0) {\r\n                word = word[1].toUpperCase() + word.slice(2);\r\n            }\r\n\r\n            newString += word;\r\n\r\n            return newString;\r\n        }, \"\");\r\n\r\n        accObject[newPropertyName] = object[currentPropertyName];\r\n\r\n        if (\r\n            typeof accObject[newPropertyName] === \"object\"\r\n            && !Array.isArray(accObject[newPropertyName])\r\n            && recursive)\r\n        {\r\n            accObject[newPropertyName] = kebabToCamel(accObject[newPropertyName]);\r\n        }\r\n\r\n        return accObject;\r\n    }, {});\r\n\r\n    //Return a copy\r\n    return Object.assign({}, newObject);\r\n}\r\n\r\n//Basic queue for BFS\r\nexport class Queue {\r\n    static TOP_MAX = 100;\r\n\r\n    constructor(initialCollection) {\r\n        if (Array.isArray(initialCollection)) {\r\n            this.values = initialCollection;\r\n        }\r\n    }\r\n\r\n    values = [];\r\n    top = 0;\r\n    get length() {return this.values.length - this.top;}\r\n    get empty() {return this.length === 0;}\r\n\r\n    dequeue() {\r\n        const val = this.values[this.top];\r\n\r\n        if (val == null) {\r\n            return null;\r\n        }\r\n\r\n        this.top++;\r\n\r\n        //We don't want to do this every time we dequeue, due to performance.\r\n        if (this.top > Queue.TOP_MAX) {\r\n            this.values = this.values.splice(this.top);\r\n            this.top = 0;\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    enqueue(val) {\r\n        this.values.push(val);\r\n    }\r\n\r\n    [Symbol.iterator]() {return this.values;}\r\n}\r\n\r\n//Abstract graph class\r\nexport class GraphEdge {\r\n    label = null;\r\n    node = null;\r\n}\r\n\r\nexport class GraphNode {\r\n    edges = [];\r\n    properties = [];\r\n    parentNode = null;\r\n    parentEdge = null;\r\n}\r\n\r\n//BFS implementation\r\nexport function shortestPath(graph, startNode, endNode, validNode) {\r\n    if (validNode != null && typeof validNode !== \"function\") {\r\n        throw new Error(\"validNode must be null or a function\");\r\n    }\r\n\r\n    //start node can have no parents.\r\n    startNode.parentNode = -1;\r\n    startNode.parentEdge = -1;\r\n\r\n    let nodeQ = new Queue();\r\n\r\n    nodeQ.enqueue(startNode);\r\n\r\n    //As longas there are items in the queue, and we haven't found our solution\r\n    while(!nodeQ.empty) {\r\n        let currentNode = nodeQ.dequeue();\r\n\r\n        if (currentNode === endNode) {\r\n            break;\r\n        }\r\n\r\n        for (let edge of currentNode.edges) {\r\n            if (edge.node.parentNode != null || (validNode != null && !validNode(edge.node))) {\r\n                continue;\r\n            }\r\n\r\n            edge.node.parentNode = currentNode;\r\n            edge.node.parentEdge = edge;\r\n\r\n            nodeQ.enqueue(edge.node);\r\n        }\r\n    }\r\n\r\n    //The graph has the information\r\n    let solution = [];\r\n\r\n    //If the parentnode has not been colored, there is no solution\r\n    if (endNode.parentNode == null) {\r\n        solution = null;\r\n    }\r\n    else {\r\n        let currentNode = endNode;\r\n\r\n        while(currentNode.parentNode !== -1) {\r\n            solution.push({\r\n                node: currentNode,\r\n                edge: currentNode.parentEdge\r\n            });\r\n\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n    }\r\n\r\n    for (let node of graph.nodes) {\r\n        node.parentNode = null;\r\n        node.parentEdge = null;\r\n    }\r\n\r\n    return solution;\r\n}\r\n\r\nexport class Graph {\r\n    nodes = [];\r\n\r\n    static fromMaze(maze) {\r\n        const width = maze.size[0];\r\n        const height = maze.size[1];\r\n        const mazeData = maze.data;\r\n        const pony = maze.pony[0];\r\n        const domokun = maze.domokun[0];\r\n        const endPoint = maze.endPoint[0];\r\n\r\n        let graph = new Graph();\r\n\r\n        graph.nodes = mazeData.map(cell => new GraphNode());\r\n\r\n        graph.nodes.forEach((node, index) => {\r\n            node.properties = [];\r\n\r\n            //We use properties to show where the pieces are.\r\n            if (index === pony) {\r\n                node.properties.push(\"pony\");\r\n            }\r\n            if (index === domokun) {\r\n                node.properties.push(\"domokun\");\r\n            }\r\n            if (index === endPoint) {\r\n                node.properties.push(\"endPoint\");\r\n            }\r\n\r\n            //Maze served specifies where WE DO NOT have a connection, so start by inserting all connections\r\n            if (graph.nodes[index - 1] != null) {\r\n                let west = {\r\n                    label: \"west\",\r\n                    node: graph.nodes[index - 1]\r\n                };\r\n\r\n                node.edges.push(west);\r\n            }\r\n            if (graph.nodes[index + 1] != null) {\r\n                let east = {\r\n                    label: \"east\",\r\n                    node: graph.nodes[index + 1]\r\n                };\r\n\r\n                node.edges.push(east);\r\n            }\r\n            if (graph.nodes[index + width] != null) {\r\n                let south = {\r\n                    label: \"south\",\r\n                    node: graph.nodes[index + width]\r\n                };\r\n\r\n                node.edges.push(south);\r\n            }\r\n            if (graph.nodes[index - width] != null) {\r\n                let north = {\r\n                    label: \"north\",\r\n                    node: graph.nodes[index - width]\r\n                };\r\n\r\n                node.edges.push(north);\r\n            }\r\n        });\r\n\r\n        //Remove edges where there are walls\r\n        mazeData.forEach((walls, index) => {\r\n            let node = graph.nodes[index];\r\n\r\n            walls.forEach(wall => {\r\n                let edgeIdx = node.edges.findIndex(val => val.label === wall);\r\n\r\n                if (edgeIdx !== -1) {\r\n                    let otherNode = node.edges[edgeIdx].node;\r\n                    let otherEdgeIdx = otherNode.edges.findIndex(edge => edge.node === node);\r\n\r\n                    node.edges.splice(edgeIdx, 1);\r\n\r\n                    if (otherEdgeIdx !== -1) {\r\n                        otherNode.edges.splice(otherEdgeIdx, 1);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return graph;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './labyrinthParameters.css';\r\nimport {camelToKebab} from \"../util\";\r\n\r\nexport class LabyrinthParameters extends Component {\r\n    state = {\r\n        mazePlayerName: \"Twilight Sparkle\",\r\n        mazeWidth: 15,\r\n        mazeHeight: 15,\r\n        difficulty: 1,\r\n        maze_id: undefined\r\n    };\r\n\r\n    async getMazeId() {\r\n        let maze_id = this.state.maze_id;\r\n\r\n        if (maze_id == null || maze_id === \"\") {\r\n            let requestBody = camelToKebab(this.state);\r\n            delete requestBody.maze_id;\r\n\r\n            //This is why we need abstractions for remote server requests!\r\n            requestBody[\"maze-height\"] = parseInt(requestBody[\"maze-height\"]);\r\n            requestBody[\"maze-width\"] = parseInt(requestBody[\"maze-height\"]);\r\n\r\n            const createRequest = new Request(\r\n                \"https://ponychallenge.trustpilot.com/pony-challenge/maze\",\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Accept\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(requestBody)\r\n                }\r\n            );\r\n\r\n            let response = await fetch(createRequest);\r\n\r\n            if (response.status !== 200) {\r\n                throw new Error(\"Something went wrong with the remote server\");\r\n            }\r\n\r\n            let responseData = await response.json();\r\n\r\n            maze_id = responseData.maze_id;\r\n        }\r\n\r\n        this.setState({maze_id: maze_id});\r\n    };\r\n\r\n    render() {\r\n        const ponies = [\r\n            \"Twilight Sparkle\"\r\n        ];\r\n\r\n        const ponySelectors = ponies.map(pony => (<option value={pony}>{pony}</option>));\r\n\r\n        return (\r\n            <form>\r\n                <label className=\"LabyrinthOptionRow\">\r\n                    Maze ID:\r\n                    <input type=\"text\" value={this.state.maze_id} onChange={e => this.setState({maze_id: e.target.value})}/>\r\n                </label>\r\n                OR<br/>\r\n                <select value={this.state.ponyName} onChange={e => this.setState({ponyName: e.target.value})}>\r\n                    {ponySelectors}\r\n                </select>\r\n                <label className=\"LabyrinthOptionRow\">\r\n                    Maze width:\r\n                    <input type=\"number\" min=\"15\" max=\"25\" value={this.state.mazeWidth} onChange={e => this.setState({mazeWidth: e.target.value})}/>\r\n                </label>\r\n                <label className=\"LabyrinthOptionRow\">\r\n                    Maze height:\r\n                    <input type=\"number\" min=\"15\" max=\"25\" value={this.state.mazeHeight} onChange={e => this.setState({mazeHeight: e.target.value})}/>\r\n                </label>\r\n                <label className=\"LabyrinthOptionRow\">\r\n                    Difficulty:\r\n                    <input type=\"number\" min=\"0\" max=\"10\" value={this.state.difficulty} onChange={e => this.setState({difficulty: parseInt(e.target.value)})}/>\r\n                </label>\r\n                <input type=\"button\" value=\"Do it!\" onClick={async () => {await this.getMazeId(); this.props.generateMaze(this.state.maze_id);}} />\r\n            </form>\r\n        );\r\n    };\r\n}\r\n","import React, { Component } from 'react';\r\nimport './labyrinth.css';\r\n\r\n//TODO: Split Cells and their different types into separate components\r\nexport class Labyrinth extends Component {\r\n    cellWidth = 20;\r\n\r\n    width = 10;\r\n    height = 10;\r\n\r\n    renderMazeCells() {\r\n        let cellElements = [];\r\n\r\n        //Normally I'd use an iterator, reducer or foreach, but given the nature of the data, I opted for x and y loops\r\n        for (let y = 0; y < this.width; y++) {\r\n            for (let x = 0; x < this.height; x++) {\r\n                let node = this.props.maze.nodes[x + (this.width * y)];\r\n\r\n                if (node.properties.indexOf(\"endPoint\") !== -1) {\r\n                    cellElements.push(this.renderEndPointCell(x, y, node));\r\n                }\r\n                else if (node.properties.indexOf(\"pony\") !== -1) {\r\n                    cellElements.push(this.renderPonyCell(x, y, node));\r\n                }\r\n                else if (node.properties.indexOf(\"domokun\") !== -1) {\r\n                    cellElements.push(this.renderDomokunCell(x, y, node));\r\n                }\r\n                else if (node.properties.indexOf(\"solution\") !== -1 && this.props.showSolution) {\r\n                    cellElements.push(this.renderSolutionCell(x, y, node));\r\n                }\r\n                else {\r\n                    cellElements.push(this.renderBasicCell(x, y, node));\r\n                }\r\n            }\r\n        }\r\n\r\n        return cellElements;\r\n    }\r\n    \r\n    renderPonyCell(x, y, node) {\r\n        return this.renderBasicCell(x, y, node, \"Pony\");\r\n    }\r\n\r\n    renderDomokunCell(x, y, node) {\r\n        return this.renderBasicCell(x, y, node, \"Domokun\");\r\n    }\r\n\r\n    renderEndPointCell(x, y, node) {\r\n        return this.renderBasicCell(x, y, node, \"End\");\r\n    }\r\n\r\n    renderSolutionCell(x, y, node) {\r\n        return this.renderBasicCell(x, y, node, \"Solution\");\r\n    }\r\n\r\n    renderBasicCell(x, y, node, additionalClasses) {\r\n        let nodeWidth = this.cellWidth;\r\n        let nodeHeight = this.cellWidth;\r\n        let nodeLeft = x*this.cellWidth;\r\n        let nodeTop = y*this.cellWidth;\r\n\r\n        let classNames = [];\r\n        node.edges.forEach(item => {\r\n            switch (item.label) {\r\n                case \"north\":\r\n                    classNames.push(\"N\");\r\n                    nodeHeight++;\r\n                    break;\r\n                case \"west\":\r\n                    classNames.push(\"W\");\r\n                    nodeWidth++;\r\n                    break;\r\n                case \"east\":\r\n                    classNames.push(\"E\");\r\n                    nodeWidth++;\r\n                    break;\r\n                case \"south\":\r\n                    classNames.push(\"S\");\r\n                    nodeHeight++;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        let classes = classNames.reduce((acc, value, index) => {\r\n            return acc + \" \" + value;\r\n        }, \"MazeCell\");\r\n\r\n        let style = {\r\n            width: nodeWidth.toString() + \"px\",\r\n            height: nodeHeight.toString() + \"px\",\r\n            left: nodeLeft.toString() + \"px\",\r\n            top: nodeTop.toString() + \"px\"\r\n        };\r\n\r\n        if (additionalClasses != null) {\r\n            classes += \" \" + additionalClasses;\r\n        }\r\n\r\n        return (<div className={classes} style={style}></div>)\r\n    }\r\n\r\n    getContainerStyle() {\r\n        return {\r\n            width: (this.cellWidth * this.width).toString() + \"px\",\r\n            height: (this.cellWidth * this.height).toString() + \"px\",\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.maze == null) {\r\n            return (<div></div>);\r\n        }\r\n\r\n        this.width = this.props.width;\r\n        this.height = this.props.height;\r\n\r\n        return (\r\n            <div className=\"MazeVisualization\" style={this.getContainerStyle()}>\r\n                {this.renderMazeCells()}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n","import React, { Component } from 'react';\r\nimport './labyrinthControls.css';\r\n\r\nexport class LabyrinthControls extends Component {\r\n\r\n\r\n    render() {\r\n        let nodeDirections = [];\r\n\r\n        if (this.props.currentNode != null) {\r\n            nodeDirections = this.props.currentNode.edges.map(item => item.label);\r\n            //stay is always valid if there is an active board\r\n            nodeDirections.push(\"stay\");\r\n            if (this.props.solutionFound) {\r\n                nodeDirections.push(\"toggleSolution\");\r\n                nodeDirections.push(\"executeSolution\");\r\n                nodeDirections.push(\"executeOneMove\");\r\n            }\r\n        }\r\n\r\n        const directions = [\r\n            \"north\",\r\n            \"south\",\r\n            \"east\",\r\n            \"west\",\r\n            \"stay\",\r\n            \"toggleSolution\",\r\n            \"executeSolution\",\r\n            \"executeOneMove\"\r\n        ];\r\n\r\n        return directions.map(item => {\r\n            return <input type=\"button\" className={item + \"Button\"} value={item} onClick={() => this.props.handleControl(item)} disabled={!nodeDirections.some(dir => dir === item)}></input>;\r\n        });\r\n    };\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {LabyrinthParameters} from \"./components/labyrinthParameters\";\nimport {Labyrinth} from \"./components/labyrinth\";\nimport {LabyrinthControls} from \"./components/labyrinthControls\";\nimport {kebabToCamel, Graph, shortestPath} from \"./util\";\n\n//This is sort of acting as the model/synchronizer/central piece. If this grows beyond a fun little experiment, proper MVC separation would be preferable.\n\nclass App extends Component {\n    state = {\n        mazeHeight: null,\n        mazeWidth: null,\n        maze_id: null,\n        labyrinthState: null,\n        showSolution: false,\n        resultImage: null,\n        solution: null\n    };\n\n    async fetchMaze(maze_id) {\n        const mazeRequest = new Request(\n            \"https://ponychallenge.trustpilot.com/pony-challenge/maze/\" + maze_id.toString(),\n            {\n                method: \"GET\",\n                headers: {\n                    \"Accept\": \"application/json\"\n                }\n            }\n        );\n\n        const mazeResponse = await fetch(mazeRequest);\n\n        if (mazeResponse.status !== 200) {\n            throw new Error(\"Something went wrong when fecthing maze\");\n        }\n\n        const mazeData = kebabToCamel(await mazeResponse.json(), true);\n\n        if (mazeData.gameState.state.toLowerCase() !== \"active\") {\n            this.setState({\n                resultImage: mazeData.gameState.hiddenUrl\n            });\n            return;\n        }\n\n        let graph = this.generateGraph(mazeData);\n\n        this.generateSolution(graph);\n\n        this.setState({\n            mazeWidth: mazeData.size[0],\n            mazeHeight: mazeData.size[1],\n            maze_id: mazeData.maze_id,\n            labyrinthState: graph\n        });\n    }\n\n    async handleControl(signal) {\n        if (this.state.labyrinthState == null || this.state.maze_id == null)\n            return;\n\n        //TODO: make enum\n        if (signal === \"toggleSolution\") {\n            this.setState({\n                showSolution: !this.state.showSolution\n            })\n        }\n        else if (signal === \"executeOneMove\") {\n            if (this.state.solution != null) {\n                await this.makeMove(this.state.solution[0].edge.label);\n                this.fetchMaze(this.state.maze_id.toString());\n            }\n        }\n        else if (signal === \"executeSolution\") {\n            if (this.state.solution != null) {\n                for (let step of this.state.solution) {\n                    let response = kebabToCamel(await this.makeMove(step.edge.label));\n\n                    if (response.state.toLowerCase() !== \"active\") {\n                        break;\n                    }\n                }\n\n                this.fetchMaze(this.state.maze_id);\n            }\n        }\n        else {\n            this.makeMove(signal);\n            this.fetchMaze(this.state.maze_id.toString());\n        }\n    }\n\n    async makeMove(direction) {\n        const moveRequest = new Request(\n            \"https://ponychallenge.trustpilot.com/pony-challenge/maze/\" + this.state.maze_id.toString(),\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    direction: direction\n                })\n            }\n        );\n\n        let response = await fetch(moveRequest);\n        return response.json();\n    }\n\n    generateSolution(graph) {\n        //Remove solution property if any\n        graph.nodes.forEach(node => node.properties.filter(x => x.solution !== \"solution\"));\n\n        let solution = shortestPath(\n            graph,\n            graph.nodes.find(node => node.properties.some(prop => prop === \"pony\")),\n            graph.nodes.find(node => node.properties.some(prop => prop === \"endPoint\")),\n            node => node.properties.every(prop => prop !== \"domokun\")\n        );\n\n        if (solution != null) {\n            //Make solution start at pony.\n            solution = solution.reverse();\n\n            solution.forEach(item => {\n                if (!item.node.properties.some(prop => prop === \"solution\")) {\n                    item.node.properties.push(\"solution\");\n                }\n            });\n        }\n\n        this.setState({\n            solution: solution\n        });\n    }\n\n    generateGraph(maze) {\n        return Graph.fromMaze(maze);\n    }\n\n    render() {\n        //resultimage is set when the maze is no longer active\n        if (this.state.resultImage !== null) {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={\"https://ponychallenge.trustpilot.com\" + this.state.resultImage} />\n                        <input type=\"button\" value=\"Refresh\" onClick={() => this.setState({\n                            mazeHeight: null,\n                            mazeWidth: null,\n                            maze_id: null,\n                            labyrinthState: null,\n                            showSolution: false,\n                            resultImage: null\n                        })} />\n                    </header>\n                </div>\n            )\n        }\n\n        let currentNode = null;\n\n        if (this.state.labyrinthState != null) {\n            currentNode = this.state.labyrinthState.nodes.find(item => item.properties.indexOf(\"pony\") !== -1);\n        }\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <LabyrinthParameters generateMaze={(maze_id) => this.fetchMaze(maze_id)} />\n                    <Labyrinth maze={this.state.labyrinthState} showSolution={this.state.showSolution} width={this.state.mazeWidth} height={this.state.mazeHeight} />\n                    <LabyrinthControls currentNode={currentNode} handleControl={(direction) => this.handleControl(direction)} solutionFound={this.state.solution != null} />\n                </header>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}